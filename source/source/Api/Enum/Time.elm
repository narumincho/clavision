-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Enum.Time exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| 時限

  - Class1 - 1時限目
  - Class2 - 2時限目
  - Class3 - 3時限目
  - Class4 - 4時限目
  - Class5 - 5時限目

-}
type Time
    = Class1
    | Class2
    | Class3
    | Class4
    | Class5


list : List Time
list =
    [ Class1, Class2, Class3, Class4, Class5 ]


decoder : Decoder Time
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "class1" ->
                        Decode.succeed Class1

                    "class2" ->
                        Decode.succeed Class2

                    "class3" ->
                        Decode.succeed Class3

                    "class4" ->
                        Decode.succeed Class4

                    "class5" ->
                        Decode.succeed Class5

                    _ ->
                        Decode.fail ("Invalid Time type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : Time -> String
toString enum =
    case enum of
        Class1 ->
            "class1"

        Class2 ->
            "class2"

        Class3 ->
            "class3"

        Class4 ->
            "class4"

        Class5 ->
            "class5"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Time
fromString enumString =
    case enumString of
        "class1" ->
            Just Class1

        "class2" ->
            Just Class2

        "class3" ->
            Just Class3

        "class4" ->
            Just Class4

        "class5" ->
            Just Class5

        _ ->
            Nothing
